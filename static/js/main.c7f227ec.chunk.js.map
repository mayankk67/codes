{"version":3,"sources":["components/PdfFromLink.js","components/PdfFromText.js","components/Hompage.js","components/routes.js","App.js","serviceWorker.js","index.js"],"names":["Pdflink","state","content","updateState","bind","createPdf","event","this","setState","target","name","value","console","log","payload","axios","post","then","res","alert","body","catch","err","onSubmit","placeholder","rows","onChange","type","React","Component","Pdftext","Homepage","Routesx","to","activeStyle","fontWeight","App","path","exact","component","Hompage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAyCeA,E,YApCX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CAACC,QAAQ,IACtB,EAAKC,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,UAAU,EAAKA,UAAUD,KAAf,gBAJN,E,yEAMDE,GACRC,KAAKC,SAAL,eAAgBF,EAAMG,OAAOC,KAAMJ,EAAMG,OAAOE,U,kCAGhDC,QAAQC,IAAIN,KAAKN,OACjB,IAAIa,EAAQP,KAAKN,MACjBc,IAAMC,KAAK,+BAA+BF,GACzCG,MAAK,SAAAC,GACFC,MAAMD,EAAIE,SAEbC,OAAM,SAAAC,GACHH,MAAMG,Q,+BAGL,IACApB,EAASK,KAAKN,MAAdC,QACL,OACI,6BACI,mFAA4D,6BAAK,6BACjE,+DAAwC,6BAAM,6BAC9C,0BAAMqB,SAAUhB,KAAKF,WACjB,8BAAUmB,YAAY,aAAaC,KAAK,IAAIC,SAAUnB,KAAKJ,YAAaO,KAAK,UAAUC,MAAOT,IAAoB,6BAAM,6BACxH,2BAAOyB,KAAK,SAAShB,MAAM,oBAE/B,4BAAKJ,KAAKN,MAAMC,c,GA/BV0B,IAAMC,WCoCbC,E,YApCX,aAAc,IAAD,8BACT,+CACK7B,MAAQ,CAACC,QAAQ,IACtB,EAAKC,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,UAAU,EAAKA,UAAUD,KAAf,gBAJN,E,yEAMDE,GACRC,KAAKC,SAAL,eAAgBF,EAAMG,OAAOC,KAAMJ,EAAMG,OAAOE,U,kCAGhDC,QAAQC,IAAIN,KAAKN,OACjB,IAAIa,EAAQP,KAAKN,MACjBc,IAAMC,KAAK,8BAA8BF,GACxCG,MAAK,SAAAC,GACFC,MAAMD,EAAIE,SAEbC,OAAM,SAAAC,GACHH,MAAMG,Q,+BAGL,IACApB,EAASK,KAAKN,MAAdC,QACL,OACI,6BACI,mFAA4D,6BAAK,6BACjE,+DAAwC,6BAAM,6BAC9C,0BAAMqB,SAAUhB,KAAKF,WACjB,8BAAUmB,YAAY,kBAAkBC,KAAK,KAAKC,SAAUnB,KAAKJ,YAAaO,KAAK,UAAUC,MAAOT,IAAoB,6BAAM,6BAC9H,2BAAOyB,KAAK,SAAShB,MAAM,oBAE/B,4BAAKJ,KAAKN,MAAMC,c,GA/BV0B,IAAMC,WCObE,E,iLANP,OACI,wG,GAHWH,IAAMC,W,gBCgCdG,E,iLA5BP,OACR,6BACQ,kBAAC,IAAD,CAASC,GAAG,IACQC,YAAa,CACbC,WAAY,SAFhC,QAOI,kBAAC,IAAD,CAASF,GAAG,eACHC,YAAa,CACbC,WAAY,SAFrB,QAOJ,kBAAC,IAAD,CAASF,GAAG,eACRC,YAAa,CACbC,WAAY,SAFhB,a,GAlBcP,IAAMC,WCqBbO,MAjBf,WACE,OACE,kBAAC,IAAD,KACA,6BACE,gCACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,eAAeE,UAAWvC,IACtC,kBAAC,IAAD,CAAOqC,KAAK,eAAeE,UAAWT,SCL5BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.c7f227ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Pdflink extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {content:''};\r\n        this.updateState=this.updateState.bind(this);\r\n        this.createPdf=this.createPdf.bind(this);\r\n    }\r\n    updateState(event){\r\n        this.setState({[event.target.name]:event.target.value});\r\n    }\r\n    createPdf(){\r\n        console.log(this.state);\r\n        var payload=this.state;\r\n        axios.post('http://localhost:9001/users2',payload)\r\n        .then(res=>{\r\n            alert(res.body);\r\n        })\r\n        .catch(err=>{\r\n            alert(err);\r\n        })\r\n    }\r\n    render(){\r\n        var {content}=this.state;\r\n        return(\r\n            <div>\r\n                <h1>Welcome to my website.... Create PDF in a click!!!!</h1><br/><br/>\r\n                <h3>Please enter your HTML content:</h3><br /><br />\r\n                <form onSubmit={this.createPdf}>\r\n                    <textarea placeholder=\"Enter Link\" rows='1' onChange={this.updateState} name='content' value={content}></textarea><br /><br />\r\n                    <input type='submit' value='convert to pdf'></input>\r\n                </form>\r\n                <h1>{this.state.content}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pdflink;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Pdftext extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {content:''};\r\n        this.updateState=this.updateState.bind(this);\r\n        this.createPdf=this.createPdf.bind(this);\r\n    }\r\n    updateState(event){\r\n        this.setState({[event.target.name]:event.target.value});\r\n    }\r\n    createPdf(){\r\n        console.log(this.state);\r\n        var payload=this.state;\r\n        axios.post('http://localhost:9001/users',payload)\r\n        .then(res=>{\r\n            alert(res.body);\r\n        })\r\n        .catch(err=>{\r\n            alert(err);\r\n        })\r\n    }\r\n    render(){\r\n        var {content}=this.state;\r\n        return(\r\n            <div>\r\n                <h1>Welcome to my website.... Create PDF in a click!!!!</h1><br/><br/>\r\n                <h3>Please enter your HTML content:</h3><br /><br />\r\n                <form onSubmit={this.createPdf}>\r\n                    <textarea placeholder=\"Enter HTML Text\" rows='10' onChange={this.updateState} name='content' value={content}></textarea><br /><br />\r\n                    <input type='submit' value='convert to pdf'></input>\r\n                </form>\r\n                <h1>{this.state.content}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pdftext;","import React from 'react';\r\n\r\nclass Homepage extends React.Component{\r\n    render(){\r\n        return(\r\n            <h1>Welcome to PDF converter. Click on the links above to convert to pdf</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nclass Routesx extends React.Component{\r\n    render(){\r\n        return(\r\n<div>\r\n        <NavLink to=\"/\"\r\n                            activeStyle={{\r\n                            fontWeight: \"bold\"\r\n                            }}\r\n                    >\r\n                    Home\r\n                </NavLink>\r\n            <NavLink to=\"/pdfFromLink\"\r\n                     activeStyle={{\r\n                     fontWeight: \"bold\"\r\n                    }}\r\n            >\r\n            Link\r\n        </NavLink>\r\n        <NavLink to=\"/pdfFromText\"\r\n            activeStyle={{\r\n            fontWeight: \"bold\"\r\n            }}\r\n            >\r\n            TEXT\r\n        </NavLink>\r\n</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routesx;","import React from 'react';\nimport './App.css';\nimport Pdflink from './components/PdfFromLink';\nimport Pdftext from './components/PdfFromText';\nimport Hompage from './components/Hompage';\nimport {Switch, Route, BrowserRouter } from 'react-router-dom';\nimport Routex from './components/routes';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div>\n      <header >\n      <Routex />\n      <Switch>\n          <Route path='/' exact component={Hompage}></Route>\n          <Route path='/pdfFromLink' component={Pdflink}></Route>\n          <Route path='/pdfFromText' component={Pdftext}></Route>\n      </Switch>\n      </header>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}